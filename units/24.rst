Unit 24 - Spatio-temporal scripting
===================================

There is another GRASS Python library to be introduced -
:grasscmd2:`GRASS GIS Temporal Framework
<libpython/temporal_framework.html>`.

In a script below similar computation like in :doc:`11` and :doc:`12`
will be performed. But instead of processing single Sentinel scene, a
spatio-temporal dataset of multiple Sentinel scenes will be processed.

Let's define input and output parameters:

* :param:`b4` - Name of input 4th band space time raster dataset (line
  :lcode:`19`)
* :param:`b8` - Name of input 8th band space time raster dataset (line
  :lcode:`23`)
* :param:`clouds` - Name of the input mask (region+clouds) space time raster dataset
  (line :lcode:`27`)
* :param:`clouds` - Name for output stats file (line :lcode:`30`)
* :param:`basename` - Basename for output raster maps (line
  :lcode:`33`)
* :param:`threshold` - Threshold for removing small areas (line
  :lcode:`38`)

Focus on functions used from :grasscmd2:`GRASS GIS Temporal Framework
<libpython/temporal_framework.html>`:

* initialization must be done by :grasscmd2:`init
  <libpython/temporal.html#temporal.core.init>` function, see line
  :lcode:`138`
* space time datasets are open on lines :lcode:`140-142` by
  :grasscmd2:`open_old_stds
  <libpython/temporal.html#temporal.open_stds.open_old_stds>`
* raster maps registered in reference dataset (b4) are listed on line
  :lcode:`146` by :grasscmd2:`get_registered_maps
  <libpython/temporal.html#temporal.abstract_space_time_dataset.AbstractSpaceTimeDataset.get_registered_maps>`
* related raster maps in two other datasets (b8, cl) are searched on
  lines :lcode:`149-152` by :grasscmd2:`get_registered_maps
  <libpython/temporal.html#temporal.abstract_space_time_dataset.AbstractSpaceTimeDataset.get_registered_maps>`
  with ``where`` parameter

.. literalinclude:: ../_static/scripts/ndvi-tgrass-v1.py
   :language: python
   :linenos:
   :emphasize-lines: 19, 23, 27, 30, 33, 38, 138, 140-142, 146, 149-152
                     
Example of usage:

.. code-block:: bash

   ndvi-tgrass.py b4=b4 b8=b8 clouds=clouds basename=ndvi_t output=stats.txt

::

   --------------------------------------------------------------------------------
   NDVI class statistics (ndvi_t_1: 2017-05-06 10:50:31)
   --------------------------------------------------------------------------------
   NDVI class 1: 6714.4 ha
   NDVI class 2: 11480.8 ha
   NDVI class 3: 29852.3 ha
   NDVI class 1: -0.9929 (min) 0.9928 (max) -0.3230 (mean)
   NDVI class 2: -0.9512 (min) 0.9993 (max) 0.3327 (mean)
   NDVI class 3: -0.9512 (min) 0.9988 (max) 0.7312 (mean)
   ...
   --------------------------------------------------------------------------------
   NDVI class statistics (ndvi_t_4: 2017-07-05 10:50:31)
   --------------------------------------------------------------------------------
   NDVI class 1: 24122.4 ha
   NDVI class 2: 7243.5 ha
   NDVI class 3: 16682.1 ha
   NDVI class 1: -0.9914 (min) 0.9710 (max) -0.0292 (mean)
   NDVI class 2: -0.9286 (min) 0.9487 (max) 0.2506 (mean)
   NDVI class 3: -0.9545 (min) 0.9982 (max) 0.8190 (mean)

.. note:: Script will run for a while in the case of Oslo region.

Sample script to download: `ndvi-tgrass-v1.py
<../_static/scripts/ndvi-tgrass-v1.py>`__
   
