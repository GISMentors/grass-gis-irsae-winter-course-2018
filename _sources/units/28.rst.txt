Unit 28 - Classification
========================

Imagery data in GRASS GIS can be grouped (e.g. channel-wise) by
:grasscmd:`i.group` module (:menuselection:`Imagery --> Develop images
and groups --> Create/edit group`). Groups and subgroups allows user to
perform analysis on any combination of the raster maps in a
group. Group or subgroup is taken as input for most of GRASS imagery
modules (``i.*``).

.. figure:: ../images/units/28/i-group-0.png
   :class: small
           
   Creating imagery group from the GUI.

.. note:: When running command from Bash, the input maps can be
   defined by :grasscmd:`g.list` output.
          
   .. code-block:: bash

      i.group group=L2A_T32VNM_20170523T104031 subgroup=L2A_T32VNM_20170523T104031 \
      input=`g.list rast pattern=L2A_T32VNM_20170523T104031_B* sep=comma`

.. tip::

   The first step as pre-analysis for a subsequent classification could be
   :grasscmdaddons:`r.smooth.seg` to produces a smooth approximation of the data
   and performs discontinuity detection.

.. tip::

    In case of panchromatic maps or limited amount of channels, it is
    often recommended to generate synthetic channels through texture
    analysis :grasscmd:`r.texture`.

Segmentation
-------------

Identification of segments (objects) from imagery data can be perform
by :grasscmd:`i.segment`.

.. code-block:: bash

   i.segment group=L2A_T32VNM_20170523T104031 output=L2A_T32VNM_20170523T104031_seg_04 threshold=0.4 memory=1000

.. figure:: ../images/units/28/segment.png
   :class: large

   Segmentation output on the left, RGB composition on the right.

Unsupervised classification
----------------------------

Unsupervised classification can be done using two GRASS GIS modules,
:grasscmd:`i.cluster` and :grasscmd:`i.maxlik`.

:grasscmd:`i.cluster` generates spectral signatures for land cover types
in an image using a clustering algorithm. The resulting signature file is
used as input for :grasscmd:`i.maxlik`, to generate an unsupervised image classification.

.. code-block:: bash

   i.cluster group=L2A_T32VNM_20170523T104031 subgroup=L2A_T32VNM_20170523T104031 \
   signaturefile=cluster classes=3 reportfile=geodata/class_cluster.txt

   i.maxlik group=L2A_T32VNM_20170523T104031 subgroup=L2A_T32VNM_20170523T104031 \
   signaturefile=cluster output=L2A_T32VNM_20170523T104031_cluster

.. figure:: ../images/units/28/cluster.png
   :class: medium

   Unsupervised classification output.

Supervised classification
--------------------------

The first step in supervised classification is to define training
areas. For this task GRASS GIS offers specialized tool called
:grasscmd:`g.gui.iclass`. Alternatively also more generic vector
digitizer :grasscmd:`g.gui.vdigit` can be used as shown below.

.. figure:: ../images/units/28/vdigit.png
   :class: large

   Vector digitizer for defining training areas.

By vector digitizer a new vector map `T32VNM_20170523T104031_training`
can be created with following attribute columns:

* :dbcolumn:`class` varchar with 5 characters, for class name
* :dbcolumn:`class_i` integer, for class id
* :dbcolumn:`color` varchar with 11 characters, for color representation

A new area can be created from vector digitizer toolbar
|grass-polygon-create| :sup:`Digitize new area`.

It is enough for each training area to define class id
:dbcolumn:`class_i`. The rest of attributes (:dbcolumn:`class` and
:dbcolumn:`color`) can be defined afterwards by Attribute Data
Manager.

.. tip::

   Instead of Attribute Data Manager also :grasscmd:`db.execute` can
   be used to fill attribute columns. See example below which shows
   how to update columns :dbcolumn:`class` and :dbcolumn:`color` based
   on specified :dbcolumn:`class_i` attribute.
   
   .. code-block:: bash
   
      db.execute sql="UPDATE T32VNM_20170523T104031_training set class_i=1 where class='water'"
      db.execute sql="UPDATE T32VNM_20170523T104031_training set class_i=2 where class='arti'"
      db.execute sql="UPDATE T32VNM_20170523T104031_training set class_i=3 where class='vege'"
      
      db.execute sql="UPDATE T32VNM_20170523T104031_training set color='35:167:234' where class='water'"
      db.execute sql="UPDATE T32VNM_20170523T104031_training set color='102:102:102' where class='arti'"
      db.execute sql="UPDATE T32VNM_20170523T104031_training set color='65:232:70' where class='vege'"

.. figure:: ../images/units/28/training_attributes.png
      
   The attribute table of training vector map.

At this point vector map with training areas is converted to raster
format. This operation can be done in GRASS by :grasscmd:`v.to.rast`.

.. code-block:: bash

   v.to.rast input=T32VNM_20170523T104031_training output=T32VNM_20170523T104031_training \
   type=area use=attr attribute_column=class_i label_column=class rgb_column=color

.. figure:: ../images/units/28/trainings.png
   :class: small
           
   The training areas as raster map (RGB composition on background).

The second step means to run classfier. There are different
classifiers based on:

* radiometric method,
* radiometric and geometric method, or
* machine learning

Radiometric method can be performed in GRASS GIS using
:grasscmd:`i.gensig` to generate statistics to be used by
:grasscmd:`i.maxlik`, see example below.

.. code-block:: bash

   i.gensig training=T32VNM_20170523T104031_training group=L2A_T32VNM_20170523T104031 \
   subgroup=L2A_T32VNM_20170523T104031 signaturefile=gensig_nosegment

   i.maxlik group=L2A_T32VNM_20170523T104031 subgroup=L2A_T32VNM_20170523T104031 \
   signaturefile=gensig_nosegment output=L2A_T32VNM_20170523T104031_maxlik

In radiometric and geometric method statistics is generated by
:grasscmd:`i.gensigset` together with :grasscmd:`i.smap` which
performs contextual image classification using sequential maximum a
posteriori (SMAP) estimation.

.. code-block:: bash

   i.gensigset training=T32VNM_20170523T104031_training group=L2A_T32VNM_20170523T104031 \
   subgroup=L2A_T32VNM_20170523T104031 signaturefile=gensigset_nosegment

   i.smap group=L2A_T32VNM_20170523T104031 subgroup=L2A_T32VNM_20170523T104031 \
   signaturefile=gensigset_nosegment output=L2A_T32VNM_20170523T104031_smap \
   goodness=L2A_T32VNM_20170523T104031_smap_good

Machine learning approach can be applied for example by
:grasscmdaddons:`r.learn.ml` which represents a front-end to the
`scikit-learn <http://scikit-learn.org>`__ python package.

.. note::

   :grasscmdaddons:`r.learn.ml` is an add-on so you have to install it
   through :grasscmd:`g.extension`. Note that
   :grasscmdaddons:`r.learn.ml` including dependecies is already
   installed on tailored :ref:`virtual machine <virtual-machine>`.

.. code-block:: bash

   r.learn.ml trainingmap=T32VNM_20170523T104031_training \
   group=L2A_T32VNM_20170523T104031 output=L2A_T32VNM_20170523T104031_learn

.. figure:: ../images/units/28/classification.png
   :class: large

   Different supervised methods. In the left radiometric
   (:grasscmd:`i.maxlik`) method, in the center radiometric and
   geometric method (:grasscmd:`i.smap`) and in the right machine
   learning approach performed by :grasscmd:`r.ml.learn`.

.. tip::

   In order to get better classification output some post-processing
   steps can be performed.

   * use :grasscmd:`r.reclass.area` to remove small areas, mask new
     value and fill gaps with :grasscmd:`r.neighbors` or
     :grasscmd:`r.fillnulls`
   * convert output to vector format and run :grasscmd:`v.clean` with
     :param:`tool=rmarea` and reasonable :param:`threshold`
