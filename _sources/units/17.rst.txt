Unit 17 - DTM script parallelization
====================================

This unit is focused on **computing parallelization**. Sample script
below produces seamless DTM (Digital Terrain Model, see :doc:`16`)
from bunch of LAS/LAZ files. Computation will be split into tiles and
performed in parallel.

DTM interpolation in parallel
-----------------------------

User interface contains two major parameters, :param:`directory` (line
:lcode:`6`) for input directory with input LAS/LAZ files, and
:param:`elevation` (line :lcode:`9`) name for output elevation raster
map mosaics. The resolution of output DTM is defined by
:param:`resolution` parameter (line :lcode:`13`). And finally number
of processes running in parallel will be controlled by :param:`nproc`
(line :lcode:`18`) parameter.

A script consists of three main functions:

1. ``import_files()`` to import input LAS/LAZ files (line
:lcode:`33`). Import process can be done in parallel by
:pygrass-modules:`ParallelModuleQueue` from PyGRASS library (see
:doc:`11` for PyGRASS intoruction), lines :lcode:`37, 42, 57-58, 60`.

2. ``create_dtm_tiles()`` to compute DTM per tile (line :lcode:`67`)
using :grasscmd:`v.surf.rst`. DTM tiles need to be computed with a
reasonable overlap in order to create seamless mosaics, see
:lcode:`73-76`. Tiles can be processed in parallel too, see
:param:`nproc` option on line :lcode:`82`.

3. ``patch_tiles()`` to patch DTM tiles together by
:grasscmd:`r.series`, see :lcode:`86`. From overlapping cell values is
computed an average value. This is main reason why :grasscmd:`r.patch`
is not used here.

.. literalinclude:: ../_static/scripts/create-dtm.py
   :language: python
   :linenos:
   :emphasize-lines: 6, 9, 13, 18, 33, 37, 42, 57-58, 60, 67, 73-76, 82, 86

Sample script to download: `create-dtm.py <../_static/scripts/create-dtm.py>`__

.. note::

	The script is taking a long time with all the tiles from
	:file:`/home/geodata/lidar/laz` directory. Choose few tiles
	for testing.

	Create a new directory eg. :file:`/tmp/lidar` and link some (2
	or 3) of the LAZ files with
	
	.. code-block:: bash
		
		ln -s /home/geodata/lidar/laz/32-1-514-136-15.laz /tmp/lidar/

	Use :file:`/tmp/lidar` as :option:`input` in the :file:`create-dtm.py` script
	
.. figure:: ../images/units/17/dtm_patched.png
   :class: middle
   
   DTM created from all available tiles.

.. _dmt-comparision:

DTM comparision
---------------

In this session we are going to calculate the Canopy Height Model (CHM), it is
the difference between interpolated DSM and imported EUDEM DTM

The CHM is computed using :grasscmd:`r.mapcalc`, executing the difference between
DSM and DTM

.. code-block:: bash

   r.mapcalc expression="chm = DTM_laz - dem"

.. figure:: ../images/units/17/chm.png
   :class: middle
   
   The CHM map.

.. _dtm-patch-section:

.. tip::

   To have better CHM it is possible to download DTM files from `hoydedata.no
   <http://www.hoydedata.no/>`__. You can import all TIF files using
   :menuselection:`File --> Import raster data --> Simplified raster
   import with reprojection` checking :item:`Directory` as :item:`Source
   type` and selecting the directory where the TIF files are.

   .. figure:: ../images/units/17/import_dtm.png
      :class: middle

      Import all DTM TIF files from for exampe :file:`geodata/lidar/dtm/`
      directory.

   Once DTM tiles are imported you can patch them using
   :grasscmd:`r.series` and set the color to `elevation` by
   :grasscmd:`r.colors`.

   .. code-block:: bash

      r.series input=`g.list type=raster pattern=DTM_* sep=','` output=DTM_patch
      r.colors map=DTM_patch color=elevation

   .. figure:: ../images/units/17/dtm_patched.png
      :class: middle
   
      Patched DTM.

   Now it is possible to run the previous :grasscmd:`r.mapcalc` command changing `dem`
   with `DTM_patch`
